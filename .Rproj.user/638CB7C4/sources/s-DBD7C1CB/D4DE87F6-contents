---
title: "eLife Project #1: R Notebook"
author: "Dakota Murray"
output: html_notebook
---

This notebook documents the analysis of the dataset on peer review outcomes by eLife. Due to the sensitive nature of the data, it is not made public. However, a sample dataset with all identifying information such as name and instution has been supplied. 


## Setup
The first step is to set up the environment. We import all the required pacakges, setup our custom ggplot theme (based on the ggplot black and white theme), and setup a function that allows for the plotting of multiple ggplot objects on a grid, while maintaining a shared legend. ALso defined is a function that is used to convert p-values to a serioes of astericks. 

```{r, message=FALSE, warning=FALSE}
library(ggplot2)
library(dplyr)
library(readr)
library(readxl)
library(gridExtra)
library(grid)
library(tidyr)

# This function for creating a multiplot grid object with a shared ledend is largely derivied, with a few minor
# tweaks, from the following blog by Andy Phillips. 
# https://andyphilips.github.io/blog/2017/04/04/single-legend-for-multiple-plots.html
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), title = "", plot = T) {
	plots <- list(...)
	position <- match.arg(position)
	g <- ggplotGrob(plots[[1]] + 
	theme(legend.position = position, 
	      legend.title = element_blank()))$grobs
	legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
	lheight <- sum(legend$height)
	lwidth <- sum(legend$width)
	gl <- lapply(plots, function(x) x +
	theme(legend.position = "none"))
	gl <- c(gl, ncol = ncol, nrow = nrow)

	combined <- switch(position,
	                   "bottom" = arrangeGrob(do.call(arrangeGrob, gl), 
	                      legend,ncol = 1,
	                      top = textGrob(title,
	                                     gp=gpar(fontsize=12, 
	                                             fontface = "bold", 
	                                             fontfamily = "Times"),
	                                     just = "top"),
					              heights = unit.c(unit(1, "npc") - lheight, lheight)
					              ),
					              
					           "right" = arrangeGrob(do.call(arrangeGrob, gl),
                          legend, 
					                ncol = 2,
				                  top = textGrob(title,
                                         gp=gpar(fontsize=12, 
                                                 fontface = "bold", 
                                                 fontfamily = "Times"), 
				                  just = "top"),
				                  widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
	if(plot) {
	  grid.newpage()
	  grid.draw(combined)  
	}
	
	# return gtable invisibly
	invisible(combined)
}

theme_dakota <- function () { 
    theme_bw(base_size=10, base_family="Times") %+replace% 
        theme(
            strip.background = element_blank(),
            strip.text = element_text(face = "bold"),
            plot.title = element_text(size = 11, face = "bold"),
            axis.text.x = element_text(size = 9, margin = margin(t = 5, b = 5)),
            legend.title = element_blank(),
            legend.position = "bottom"
        )
}

# converts a provided p-value into a representation that is easier to visualize
sig2ast <- function(p) { ifelse(p <= 0.0001, "****", 
                                ifelse(p <= 0.001, "***", 
                                       ifelse(p <= 0.01, "**", 
                                              ifelse(p <= 0.05, "*", "ns")
                                              )
                                       )
                                )
}
```


## Data import and manipulation
Next we import the data. This version of the dataset was compiled from a seried of excel files provided by elife. Several pre-processing steps are not shown here, but are instead in the other R scipt present in this project. Due to the sensitive nature of this data, it is unavailable and not to be made public. We perform several manupulations and add new variables in order to make analysis easier throughout the document,

1. Disambiguate country names and add continent categories
2. Convert all cases of null-gender assignment to a value of "UNK", or "Unknown". Typically, NA assignments occur when an author is missing (as is the case for reviewer 4, when there are only three reviewers, or for a last author when the manuscript was rejected during initial submission), or when some error occured during the assignment process (no name was matched during the assignment. 
3. Convert all vairbales relating to gender to be a factor with three levels. 
4. Flag the data if no decision has been made for the initial submission, which tends to be the case when they were submitted close our date cutoff.
5. Flag the data if no decision has been made for the full submission, which usuall occurs when the manuscript is pending decision or revisions during our date cutoff.
6. Flag the data if an appeal has been made at any stage of the review process.
7. Flag the data if it has been encouraged during the initial decision phase.
8. Flag the data if it has been submitted and accepted as a full submission
9. Flag the data if there are potential inconsistencies in how names are present. For example, in some full submissions there is no first author present, but there is a last author present. The assumption is that a first author and last author should always be present, even if they are the same person. 
10. A list of all full submission decisions made on each document
11. The time spent for reviewers to deliberate each part of the revision process
12. The stage in which the final decision was made
13. The number of reviewers invovled in reviewing the full submission
14. The number of male and number of female reviewers
15. A categorical variable representing the composition of the team as being all male, all female, or a mixture
16. The number of revisions that the manuscript went through
17. Variables representing country homophily between each type of authorship and any member of the reviewer team 

```{r}
# Load the main eLife data file
elife <- read_excel("~/Desktop/elife_datafile.xls")

# Load the country infomration .csv file, which was manually created and available along with this file
country_mapping <- read_csv("elife_countries.csv")

elife <- elife %>%
  # This group_by is needed to make the mutate functions work propoerly
  group_by(MSNO) %>%
  # these vairbales need to be converted to lowercase for the next step...
  mutate(
    ca_country = tolower(ca_country),
    la_country = tolower(la_country),
    fa_country = tolower(fa_country),
    bre_country = tolower(bre_country),
    se_country = tolower(se_country),
    reviewer1_country = tolower(reviewer1_country),
    reviewer2_country = tolower(reviewer2_country),
    reviewer3_country = tolower(reviewer3_country),
    reviewer4_country = tolower(reviewer4_country)
  ) %>%
  # This series of left_joins + mutates + selects is ugly, but it seems one of the most straightforward ways of adding the country mapping values for 
  # each of the author and reviewer types. 
  left_join(country_mapping, by = c("ca_country" = "Country")) %>%
  mutate(
    ca_country = Mapping,
    ca_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("la_country" = "Country")) %>%
  mutate(
    la_country = Mapping,
    la_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("fa_country" = "Country")) %>%
  mutate(
    fa_country = Mapping,
    fa_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("se_country" = "Country")) %>%
  mutate(
    se_country = Mapping,
    se_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("bre_country" = "Country")) %>%
  mutate(
    bre_country = Mapping,
    bre_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("reviewer1_country" = "Country")) %>%
  mutate(
    reviewer1_country = Mapping,
    reviewer1_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("reviewer2_country" = "Country")) %>%
  mutate(
    reviewer2_country = Mapping,
    reviewer2_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("reviewer3_country" = "Country")) %>%
  mutate(
    reviewer3_country = Mapping,
    reviewer3_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  left_join(country_mapping, by = c("reviewer4_country" = "Country")) %>%
  mutate(
    reviewer4_country = Mapping,
    reviewer4_continent = Continent
  ) %>%
  select(-Mapping, -Continent) %>%
  # Now I will turn towards the other variables that we will be working with. 
  mutate(
    # convert NA assignments in gender assignment to a value of "Unknown" as well as setup factor levels
    ca_gender = relevel(factor(ifelse(ca_gender %in% c("M", "F"), ca_gender, ifelse(!is.na(ca_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
    fa_gender = relevel(factor(ifelse(fa_gender %in% c("M", "F"), fa_gender, ifelse(!is.na(fa_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
    la_gender = relevel(factor(ifelse(la_gender %in% c("M", "F"), la_gender, ifelse(!is.na(la_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
    se_gender = relevel(factor(ifelse(se_gender %in% c("M", "F"), se_gender, ifelse(!is.na(se_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
    bre_gender = relevel(factor(ifelse(se_gender %in% c("M", "F"), bre_gender, ifelse(!is.na(bre_name), "UNK", NA)), 
                               levels = c("M", "F", "UNK")), ref = "F"),
    reviewer1_gender = relevel(factor(ifelse(reviewer1_gender %in% c("M", "F"), reviewer1_gender, ifelse(!is.na(reviewer1_name), "UNK", NA)), 
                                      levels = c("M", "F", "UNK")), ref = "F"),
    reviewer2_gender = relevel(factor(ifelse(reviewer2_gender %in% c("M", "F"), reviewer2_gender, ifelse(!is.na(reviewer2_name), "UNK", NA)), 
                                      levels = c("M", "F", "UNK")), ref = "F"),
    reviewer3_gender = relevel(factor(ifelse(reviewer3_gender %in% c("M", "F"), reviewer3_gender, ifelse(!is.na(reviewer3_name), "UNK", NA)), 
                                      levels = c("M", "F", "UNK")), ref = "F"),
    reviewer4_gender = relevel(factor(ifelse(reviewer4_gender %in% c("M", "F"), reviewer4_gender, ifelse(!is.na(reviewer4_name), "UNK", NA)), 
                                      levels = c("M", "F", "UNK")), ref = "F"),
   
    # Flag the data if there is an initial submission but no decision has been made
    initial_decision_made = !is.na(initial_decision),
    
    # Flag data if full submission has been submitted, but no decision has been made (ie: still in revision or decision stage)
    full_decision_made = initial_decision != "Reject" & last(na.omit(c(full_decision, rev1_decision, rev2_decision))) != "Revise",
    
    # Flag the data if it was appealed at any state during its process
    appealed_any_stage = any(c(appeal_state1, appeal_state2, appeal_state3) == 4) & any(!is.na(c(appeal_state1, appeal_state2, appeal_state3))),
    
    # Flag the data if the initial decision of the manuscript was encouraged
    encouraged = initial_decision_made & initial_decision == "Encourage",
    
    # Flag the data if the full submission was eventually accepted
    accepted = full_decision_made & any(c(full_decision, rev1_decision, rev2_decision) == "Accept", na.rm = T),
    
    # Flag data if there are potential inconsistencies with the naming, ie: no last name for a full submittion but there is a first name
    #name_inconsistency = full_decision_made & ((!is.na(la_name) & is.na(elife$fa_name)) | ((is.na(la_name) & !is.na(fa_name)))),
    
    # This is a list of all the full decisions made (first decision or full submission + subsequent revisions)
    full_decisions = list(na.omit(c(full_decision, rev1_decision, rev2_decision))),
    
    # Add variables related to how long it takes to go through the review process
    deltatime_rev1 = as.Date(rev1_decision_date) - as.Date(rev1_submission_date),
    deltatime_rev2 = as.Date(rev2_decision_date) - as.Date(rev2_submission_date),
    
    # Store the final stage of the full-submission process in which the final decision was amde
    final_decision_stage = ifelse(full_decision_made, c("Full", "Rev1", "Rev2")[grep("Accept|Reject", unlist(full_decisions))], "Pending"),
    
    # Calculat the total amount of time spent deliberating revision decisions 
    revision_time = ifelse(final_decision_stage == "Full", NA, 
                           ifelse(final_decision_stage == "Rev1", deltatime_rev1,
                                  deltatime_rev1 + deltatime_rev2)),
      
    # Calculate total amount of time spent deliberating decisions from first full submittion to the final decision
    deltatime_final = ifelse(final_decision_stage == "Full", deltatime_full_submission_decision, 
                             ifelse(final_decision_stage == "Rev1", deltatime_rev1 + deltatime_full_submission_decision, 
                                    deltatime_rev2 + deltatime_rev1 + deltatime_full_submission_decision)),
    
    # Now add variables relating to the composition of the reviewer team
    # Quality of list variables—list of the names, countries, and genders of reviewers
    reviewer_names = list(tolower(na.omit(c(reviewer1_name, reviewer2_name, reviewer3_name, reviewer4_name)))),
    reviewer_genders = list(na.omit(c(reviewer1_gender, reviewer2_gender, reviewer3_gender, reviewer4_gender))),
    reviewer_countries = list(tolower(na.omit(c(reviewer1_country, reviewer2_country, reviewer3_country, reviewer4_country)))),
    reviewer_continents = list(tolower(na.omit(c(reviewer1_continent, reviewer2_continent, reviewer3_continent, reviewer4_continent)))),
    
    # Number of reviewers in the team
    num_reviewers = length(unlist(reviewer_names)),
    
    # Number of reviewers on the team identified as female
    num_female_reviewers = sum(unlist(reviewer_genders) == 1),
    # NUmber of reviewers on the team identified as male
    num_male_reviewers = sum(unlist(reviewer_genders) == 2),
    
    # Composition: three variables indicaitng whether all have a gender identified as male, all have a gender identified as female, or there is a mix
    # of at least one male and one female reviewer on the team
    composition = factor(ifelse(is.na(full_submission_date), NA, 
                                ifelse(all(unlist(reviewer_genders) == 2), "All Men", 
                                       ifelse(all(unlist(reviewer_genders) == 1), "All Women", 
                                              ifelse(any(unlist(reviewer_genders) == 1) & any(unlist(reviewer_genders) == 2), "Mixed", 
                                                     "Uncertain"
                                                     )
                                              )
                                       )
                                ) # end first ifelse
                         , levels = c("All Men", "All Women", "Mixed", "Uncertain")), # end factor
    # Number of revisions
    num_revisions = length(unlist(full_decisions)) - 1,
    # The corresponding author is from the same country as at least one reviewer 
    ca_country_homophily = !is.na(ca_country) & tolower(ca_country) %in% unlist(reviewer_countries),
    # The last author is from the same country as at least one reviewer
    la_country_homophily = !is.na(la_country) & tolower(la_country) %in% unlist(reviewer_countries),
    # The first author is from the same country as at least one reviewer
    fa_country_homophily = !is.na(fa_country) & tolower(fa_country) %in% unlist(reviewer_countries),
    
    # The corresponding author is from the same country as at least one reviewer 
    ca_continent_homophily = !is.na(ca_continent) & tolower(ca_continent) %in% unlist(reviewer_continents),
    # The last author is from the same country as at least one reviewer
    la_continent_homophily = !is.na(la_continent) & tolower(la_continent) %in% unlist(reviewer_continents),
    # The first author is from the same country as at least one reviewer
    fa_continent_homophily = !is.na(fa_continent) & tolower(fa_continent) %in% unlist(reviewer_continents),
    
    # The BRE is also listed as a reviewer
    bre_is_reviewer = tolower(bre_name) %in% unlist(reviewer_names),
    
    # A short series of variables specifying if the first and last authors are the same, or if the CA is also the first/last author
    ca_is_first = tolower(ca_name) == tolower(fa_name),
    ca_is_last = tolower(ca_name) == tolower(la_name),
    single_authored = tolower(fa_name) == tolower(la_name),
    
    # this just cleans up a poorly named variable earlier in the preprocessing step
    submission_type = type.x
  ) %>%
  # Now lets remove any identifying information, ie: names and institutions
  select(-c(ca_name, la_name, fa_name, se_name, bre_name, reviewer1_name, reviewer2_name, reviewer3_name, reviewer4_name, 
         ca_institution, la_institution, fa_institution, se_institution, bre_institution, 
         reviewer1_institution, reviewer2_institution, reviewer3_institution, reviewer4_institution)) %>%
  # Also, lets remove variables that we will not prefently be working with, just to keep the table clean
  select(-c(prop_male_reviewers, prop_female_reviewers, appeal_state1, appeal_state2, appeal_state3, type.x, type.y, 
            reviewer_names, reviewer_countries, reviewer_continents, reviewer_genders, full_decisions))

# write this file as output, so that future analysis can start from this file as a checkpoint
write.csv(elife, "~/Dropbox/elife/formatted_elife.csv")

# clean the namespace
country_mapping <- NULL
```

## Checkpoint
Here we cna load the data that was manipulated in the previous code chunk. Use this if the original data is not available, but if you would still like to continue with the data that has personally identifiable infomration removed.
```{r}
elife <- read.csv("~/Dropbox/elife/formatted_elife.csv")
```


## Figure 2

This is the second figure in the paper, which is shown in the methods section. The purpose of this figure is to present the changes in eLife over time, particularly changes to the number of submissions and rates of encourage, acceptance, and the rate of acceptance of encouraged papers. 
```{r}
p1 <- elife %>%
  filter(initial_decision_made & (is.na(full_submission_date) | full_decision_made)) %>%
  gather(author_key, value = gender, ca_gender, la_gender, fa_gender) %>%
  group_by(submission_year) %>%
  summarize(
        paper_count = n(),
        accept_count = sum(accepted == TRUE, na.rm = T),
        encourage_count = sum(encouraged == TRUE, na.rm = T)
  ) %>%
  gather(measure_key, value = measurement, paper_count, encourage_count, accept_count) %>%
  mutate(measure_key = factor(measure_key, levels = c("paper_count", "encourage_count", "accept_count"))) %>%
  filter(submission_year < 2017) %>%
  ggplot(aes(x = submission_year, y = measurement, linetype = measure_key, color = measure_key, shape = measure_key)) +
  geom_line() +
  geom_point(size = 2) +
  theme_dakota() +
  labs(
    x = "Submission Year",
    y = "Count of Manuscripts"
  ) +
  scale_color_manual(labels = c("accept_count" = "#Accepted", "encourage_count" = "#Encouraged", "paper_count" = "#Submitted"), values = c("black", "blue", "red")) +
  scale_shape_discrete(labels = c("accept_count" = "#Accepted", "encourage_count" = "#Encouraged", "paper_count" = "#Submitted")) +
  scale_linetype_discrete(labels = c("accept_count" = "#Accepted", "encourage_count" = "#Encouraged", "paper_count" = "#Submitted"))
  
  
p2 <- elife %>%
  filter(initial_decision_made & (is.na(full_submission_date) | full_decision_made)) %>%
  gather(author_key, value = gender, ca_gender, la_gender, fa_gender) %>%
  group_by(submission_year) %>%
  summarize(
        paper_count = n(),
        accept_count = sum(accepted == TRUE, na.rm = T),
        encourage_count = sum(encouraged == TRUE, na.rm = T),
        encourage_rate = encourage_count / paper_count,
        accept_rate = accept_count / paper_count,
        encourage_accept_rate = accept_count / sum(!is.na(full_decision_made) & full_decision_made)
  ) %>%
  gather(measure_key, value = measurement, encourage_rate, accept_rate, encourage_accept_rate) %>%
  mutate(
    measure_key = factor(measure_key, levels = c("encourage_rate", "accept_rate", "encourage_accept_rate"))
  ) %>%
  filter(submission_year < 2017) %>%
  ggplot(aes(x = submission_year, y = measurement, linetype = measure_key, color = measure_key, shape = measure_key)) +
  geom_line() +
  geom_point(size = 2) +
  ylim(0, 1) +
  theme_dakota() +
  labs(
    x = "Submission Year",
    y = "Rate"
  ) +
  scale_color_manual(labels = c("accept_rate" = "Acceptance Rate", "encourage_rate" = "Encourage Rate", "encourage_accept_rate" = "E-A Rate"), 
                     values = c("blue", "red", "purple")) +
  scale_shape_manual(labels = c("accept_rate" = "Acceptance Rate", "encourage_rate" = "Encourage Rate", "encourage_accept_rate" = "E-A Rate"),
                     values = c(17, 15, 18)) +
  scale_linetype_manual(labels = c("accept_rate" = "Acceptance Rate", "encourage_rate" = "Encourage Rate", "encourage_accept_rate" = "E-A Rate"), 
                          values = c("dotted", "dashed", "dotdash"))

fig2 <- grid.arrange(p1, p2, ncol = 2)
#ggsave("~/Desktop/elife_figure2.png", plot = fig2, height = 4, width = 7)

# now again clear the namespace
fig2 <- NULL
p1 <- NULL
p2 <- NULL
```

## Figure 3
This is figure 3 in our manuscript, presented as the first figure in the results section. This figure is intended to prodive an overall summary of the difference in outcomes between men and women at eLife. We examine proportion of total submissions, encourage rate, acceptance rates, and ancourage-accept rates. We also perform chi-squares tests of equal proportion for several of these measures, namely the encourage rate, acceptance rate, and encourage-accept rates, and results are shown on the graph. We do not perform tests on the submission rates. Some measures— the encourace and accept rates for first and last authors—are missing from the grab becuase we do not have data on first or last author for manuscripts that were not encouraged, and so we can not calculate a gendered rates for these combinations. 
```{r}
# First, I'll go through and run all the tests to get signif. values. I toyed around with ways to do this more programatically, but I think that this
# manual method is perhaps the simplest

# First, test the encourage rate diffs
s <- subset(elife, initial_decision_made)
t <- table("ca_gender" = s$ca_gender, "encouraged" = s$encouraged)[1:2,]
ca_encouraged <- prop.test(t[, 2], rowSums(t))

# Difference in acceptance rates by gender of corresponding author
s <- subset(elife, initial_decision_made & (is.na(full_submission_date) | full_decision_made))
t <- table("ca_gender" = s$ca_gender, "encouraged" = s$accepted)[1:2,]
ca_accepted <- prop.test(t[, 2], rowSums(t))

# Difference in encourage-acceptance rates by gender of corresponding author
s <- subset(elife, initial_decision_made & full_decision_made)
t <- table("ca_gender" = s$ca_gender, "accepted" = s$accepted)[1:2,]
ca_ea <- prop.test(t[, 2], rowSums(t))

# Difference in encourage-acceptance rates by gender of first author
s <- subset(elife, initial_decision_made & full_decision_made)
t <- table("fa_gender" = s$fa_gender, "accepted" = s$accepted)[1:2,]
fa_ea <- prop.test(t[, 2], rowSums(t))

# Difference in encourage-acceptance rates by gender of last author
s <- subset(elife, initial_decision_made & full_decision_made)
t <- table("la_gender" = s$la_gender, "accepted" = s$accepted)[1:2,]
la_ea <- prop.test(t[, 2], rowSums(t))

# Now we use the results of these tests to construct a table
measurements <- c(rep("submit_rate", 3), rep("encourage_rate", 3), rep("accept_rate", 3), rep("encourage_accept_rate", 3))
author <- rep(c("ca_gender", "fa_gender", "la_gender"), 4)

sig <- c("N/A", "N/A", "N/A", # submit rates, all NA since we don't really compare this
         sig2ast(ca_encouraged$p.value), "N/A", "N/A", # encourage rate
         sig2ast(ca_accepted$p.value), "N/A", "N/A", 
         sig2ast(ca_ea$p.value), sig2ast(fa_ea$p.value), sig2ast(la_ea$p.value)
         )
sig_df <- data.frame(measure_key = factor(measurements), author_key = factor(author), sig = sig)

# Now lets save these test results for later
fig3.tests <- list("Corresponding author enc. rate" = ca_encouraged, 
                   "Corresponding author acc. rate" = ca_accepted, 
                   "Corresponding author enc-acc rate" = ca_ea, 
                   "First author enc-acc rate" = fa_ea, 
                   "last author enc-acc rate" = la_ea)


fig3 <- elife %>%
  filter(initial_decision_made) %>%
  gather(author_key, value = gender, ca_gender, la_gender, fa_gender) %>%
  group_by(author_key) %>%
  mutate(
    total_papers = ifelse(author_key == "ca_gender", n(), sum(!is.na(full_submission_date)))
    )%>%
  group_by(author_key, gender) %>%
  summarize(
        paper_count = n(),
        accept_count = sum(accepted == TRUE, na.rm = T),
        encourage_count = sum(encouraged == TRUE, na.rm = T),
        encourage_rate = ifelse(author_key[1] == "ca_gender", encourage_count / n(), NA),
        accept_rate = ifelse(author_key[1] == "ca_gender", accept_count / sum(is.na(full_submission_date) | full_decision_made, na.rm = T), NA),
        submit_rate = n() / total_papers[1],
        encourage_accept_rate = accept_count / sum(!is.na(full_submission_date) & full_decision_made, na.rm = T)
  ) %>%
  filter(gender %in% c('M', 'F')) %>%
  ungroup() %>%
  gather(measure_key, value = measurement, submit_rate, encourage_rate, accept_rate, encourage_accept_rate) %>%
  left_join(sig_df, by = c("measure_key", "author_key")) %>%
  mutate(
    author_key = factor(author_key,
                        labels = c("ca_author" = "Corresponding", "fa_author" = "First", "la_author" = "Last")),
    measure_key = factor(measure_key, 
                         labels = c("submit_rate" = "Submissions", "encourage_rate" = "Enc. %", "accept_rate" = "Acc. %", "Enc-Acc %"),
                         levels = c("submit_rate", "encourage_rate", "accept_rate", "encourage_accept_rate")),
    gender = ifelse(gender == "F", "Female", "Male")
  ) %>%
  ggplot(aes(x = gender, y = measurement, color = factor(gender), shape = factor(gender), fill = factor(gender))) +
  geom_bar(stat = "identity", alpha = 0.8, color = "black") +
  geom_text(aes(x = gender, y = measurement + 0.10, label = paste0(round(measurement, 3) * 100, "%")), size = 2.5, color = "black", position = position_dodge(0.87)) +
  geom_text(aes(x = 1.5, y = 0.9, label = ifelse(measure_key == "Submissions", "", as.character(sig))), color = "black") +
  geom_segment(aes(x = 1, xend = 2, y = ifelse(sig != "N/A", 0.8, 1.1), yend = ifelse(sig != "N/A", 0.8, 1.1)), color = "black") +
  facet_grid(author_key ~ measure_key) +
  ylim(0, 1) +
  theme_dakota() +
  theme(
    axis.title.x = element_blank()
  ) +
  labs(
    x = "Author Gender",
    y = "%",
    caption = "Chi-squared tests of equal proportion:\n**** = p <= 0.0001; *** = p <= 0.001; ** = p <= 0.01; ** = p <= 0.01; * = p <= 0.05; ns = p > 0.05"
  )

fig3
#ggsave("~/Desktop/elife_figure3.png", plot = fig3, height = 5, width = 7)
```

And below are the explicit test resutls for figure 3
```{r}
fig3.tests
```


## Figure 4
This figure demonstrates difference in gendered encourage-acceptance rates based on the gender composition of the reviewer team. Four compositions are considered: either all members are identified as male, all are identified as female, at least one member is identified as male and one as female, or the composition is uncertain (ie: we do not identify the gender of every member, and those members we do identify are all one gender). 

### Note: We still need to decide what to do about the BREs, are they always automatically considered part of hte reviewing team?
```{r}
sig_list <- list()
for(comp in c("All Men", "All Women", "Mixed", "Uncertain")) {
  for(gender_var in c("ca_gender", "fa_gender", "la_gender")) {
    if (!is.na(comp)) {
      sub <- subset(elife, initial_decision_made & full_decision_made & composition == comp)[, c("accepted", gender_var)]
      t <- t(table(sub))[1:2,]
      test = prop.test(t[, 2], rowSums(t))
      sig_list[length(sig_list) + 1] <- list(test)
    }
  }
}

sig_df <- data.frame(composition = c(rep("All Men", 3), rep("All Women", 3), rep("Mixed", 3), rep("Uncertain", 3)),
                     author_key = rep(c("ca_gender", "fa_gender", "la_gender"), 4),
                     sig = sapply(sig_list, function(test) { sig2ast(test$p.value)})
)


fig4 <- elife %>%
  filter(initial_decision_made & full_decision_made & !is.na(composition)) %>%
  mutate(total_submissions = n()) %>%
  gather(author_key, value = gender, ca_gender, fa_gender, la_gender) %>%
  filter(gender %in% c("M", "F")) %>%
  group_by(composition, author_key, gender) %>%
  summarize(
    paper_count = n(),
    accept_count = sum(accepted == TRUE),
    acceptance_rate = sum(accepted == TRUE) / paper_count,
    standard_error = sqrt( (acceptance_rate * (1 - acceptance_rate)) / paper_count),
    lower = acceptance_rate - standard_error,
    upper = acceptance_rate + standard_error
  ) %>%
  ungroup() %>%
  left_join(sig_df, by = c("composition", "author_key")) %>%
  mutate(
    author_key = factor(author_key, labels = c("ca_gender" = "Corresponding", "fa_gender" = "First", "la_gender" = "Last"))
  ) %>%
  ggplot(aes(x = gender, y = acceptance_rate, fill = gender)) +
  geom_bar(stat = "identity", alpha = 0.8, color = "black") +
  geom_text(aes(y = 0.1, label = paste0(round(acceptance_rate, 3) * 100, "%")), size = 2.5, color = "black", position = position_dodge(0.87)) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black", alpha = 0.8) +
  geom_text(aes(x = 1.5, y = 0.90, label = sig), color = "black") +
  geom_segment(aes(x = 1, xend = 2, y = ifelse(sig != "N/A", 0.8, 1.1), yend = ifelse(sig != "N/A", 0.8, 1.1)), color = "black") +
  facet_grid(author_key ~ composition) +
  ylim(0, 1) +
  theme_dakota() +
  theme(
    axis.title.x = element_blank()
  ) +
  labs(y = "Encourage-Acceptance Rate") +
  scale_fill_discrete(labels = c("F" = "Female", "M" = "Male"))
  
fig4
ggsave("~/Desktop/elife_figure4.png", plot = fig4, height = 5, width = 7)
```

And also, here are the specifics of the test that formed the significant levels for the previous tests. In the below stat output, prop 1 is always the value for women, while prop 2 is the proportion value of men. 
```{r}
names(sig_list) <- c("All Men-corresponding", "All Men-first", "All Men-last", "All Women-corresponding", "All Women-first", 
                     "All Women-last", "Mixed-corresponding", "Mixed-first", "Mixed-last", 
                     "Uncertain-corresponding", "Uncertain-first", "Uncertain-last")
sig_list
```


## Figure 5

This next figure presents some of the data regarding the population of manuscripts submitted to eLife by the country of origin
```{r}

  elife$country = elife[[country_str]]
  elife$name = elife[[name_str]]
  
  all_submissions <- length(unique(elife$MSNO))
  all_accepted <- sum(elife$accepted == T, na.rm = T)
  all_encouraged <- sum(elife$encouraged == T, na.rm = T)
  all_bres <- length(unique(elife$bre_name))
  
elife %>%
  filter(initial_decision_made) %>%
  gather(author_key, country, ca_country, fa_country, la_country) %>%
  group_by(author_key, country) %>%
  summarize(
    submissions = n(),
    num_people = length(unique(tolower(
  )
  
  filter(!is.na(country)) %>%
    group_by(country) %>%
    summarize(
      submissions = n(),
      num_people = length(unique(name)),
      encouraged = sum(encouraged == T, na.rm = T),
      accepted = sum(accepted == T, na.rm = T),
      encourage_rate = encouraged / submissions,
      acceptance_rate = accepted / submissions,
      prop_of_all = submissions / all_submissions,
      prop_of_encouraged = encouraged / all_encouraged,
      prop_of_accepted = accepted / all_accepted,
      prop_bre = length(unique(bre_name)) / all_bres
    ) %>%
    group_by(country) %>%
      mutate(totals = sum(submissions)) %>%
    ungroup() %>%
    top_n(limit, totals)
  return(country_data)

  p1 <- ggplot(long_data, aes(x = country, y = measurement)) +
  geom_bar(stat = "identity", color = "black", alpha = 0.8, fill = "dodgerblue4", position = position_dodge(5)) +
  geom_text(aes(y = measurement, label = paste0(round(measurement, 3) * 100, "%")), size = 2.5, hjust = -0.2, family = "Times") +
  scale_y_continuous(limits = c(0, 0.7)) +
  facet_wrap(~key, labeller = labeller(key = labels)) +
  theme_bw() +
  coord_flip() +
  labs(y = "Proportion of All") +
  theme(
    strip.background = element_blank(),
    text = element_text(size = 10, family = "Times"),
    plot.title = element_text(size = 12),
    strip.text = element_text(face = "bold"),
    axis.title.y = element_blank()
  )

```


