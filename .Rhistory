continent = rep(c("Africa", "Asia", "Europe", "North America", "Oceania", "South America"), 2),
sig = c("N/A", sig2ast(corr$p.value), sig2ast(first$p.value), sig2ast(last$p.value)))
continent_sig_list <- list("Corresponding Author" = corr, "First Author" = first, "Last Author" = last)
# Now we should repeat this graph, except this time for the continental representation
expected <- people %>%
filter(type == "Gatekeeper") %>%
mutate(total = n()) %>%
filter(continent != "Antarctica") %>%
group_by(type, continent) %>%
summarize(
expected_prop = n() / total[1]
) %>%
ungroup() %>%
select(-type)
p2 <- people %>%
group_by(type) %>%
mutate(total = n()) %>%
filter(continent != "Antarctica") %>%
group_by(type, continent) %>%
summarize(
prop = n() / total[1]
) %>%
ungroup() %>%
left_join(expected, by = "continent") %>%
left_join(sig_df, by = c("continent", "type")) %>%
mutate(
type = factor(type, levels = c("Gatekeeper", "Corr. Author", "First Author", "Last Author"))
) %>%
# start ggplot
ggplot(aes(x = continent, y = prop, fill = continent)) +
geom_bar(stat = "identity", alpha = 0.8, color = "black") +
geom_bar(stat = "identity", aes(y = expected_prop), alpha = 0, color = "black", fill = "white", size = 0.5, linetype = "dashed") +
#geom_text(aes(label = paste0(round(prop, 3) * 100, "%"), y = 0.05), size = 2) +
geom_text(aes(label = sig, x = 3.5, y = 0.92), size = 2.5) +
geom_segment(aes(x = 1, xend = 6, y = ifelse(sig != "N/A", 0.9, 1.1), yend = ifelse(sig != "N/A", 0.9, 1.1)), color = "black") +
facet_wrap(~type, nrow = 1) +
theme_dakota() +
ylim(c(0, 1)) +
guides(fill = F) +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x = element_blank()
) +
labs(y = "Proportion") +
scale_fill_brewer(palette = "Set2")
fig8 <- grid.arrange(p1, p2)
ggsave("~/Desktop/elife_figure8.png", plot = fig8, height = 5, width = 7)
s <- subset(people, type == "Last Author" | type == "Gatekeeper" )
t <- t(table(s$gender, s$type))
t
last <- chisq.test(t[, 1:2])
last
# Now lets get the significance levels...
s <- subset(people, type == "Corr. Author" | type == "Gatekeeper" )
t <- t(table(s$gender, s$type))
corr <- chisq.test(t[, 1:2])
s <- subset(people, type == "First Author" | type == "Gatekeeper" )
t <- t(table(s$gender, s$type))
first <- chisq.test(t[, 1:2])
s <- subset(people, type == "Last Author" | type == "Gatekeeper" )
t <- t(table(s$gender, s$type))
last <- chisq.test(t[, 1:2])
sig_df <- data.frame(type = rep(c("Gatekeeper", "Corr. Author", "First Author", "Last Author"), 1),
gender = rep(c("Male", "Female"), 2),
sig = c("N/A", sig2ast(corr$p.value), sig2ast(first$p.value), sig2ast(last$p.value)))
gender_sig_list <- list("Corresponding Author" = corr, "First Author" = first, "Last Author" = last)
expected <- people %>%
filter(gender %in% c("M", "F")) %>%
mutate(gender = ifelse(gender == "M", "Male", "Female")) %>%
filter(type == "Gatekeeper") %>%
mutate(total = n()) %>%
group_by(type, gender) %>%
summarize(
expected_prop = n() / total[1]
) %>%
ungroup() %>%
select(-type)
p1 <- people %>%
filter(gender %in% c("M", "F")) %>%
mutate(gender = ifelse(gender == "M", "Male", "Female")) %>%
group_by(type) %>%
mutate(total = n()) %>%
group_by(type, gender) %>%
summarize(
prop = n() / total[1]
) %>%
ungroup() %>%
left_join(expected, by = "gender") %>%
left_join(sig_df, by = c("gender", "type")) %>%
mutate(
type = factor(type, levels = c("Gatekeeper", "Corr. Author", "First Author", "Last Author"))
) %>%
# start ggplot
ggplot(aes(x = gender, y = prop, fill = gender)) +
geom_bar(stat = "identity", alpha = 0.8, color = "black") +
geom_bar(stat = "identity", aes(y = expected_prop), alpha = 0, color = "black", fill = "white", size = 0.5, linetype = "dashed") +
geom_text(aes(label = paste0(round(prop, 3) * 100, "%"), y = 0.1), size = 3) +
geom_text(aes(label = sig, x = 1.5, y = 0.92), size = 2.5) +
geom_segment(aes(x = 1, xend = 2, y = ifelse(sig != "N/A", 0.9, 1.1), yend = ifelse(sig != "N/A", 0.9, 1.1)), color = "black") +
facet_wrap(~type, nrow = 1) +
theme_dakota() +
ylim(c(0, 1)) +
theme(
axis.title.x = element_blank(),
legend.position = "right"
) +
labs(y = "Proportion") +
guides(fill = F)
s <- subset(people, continent != "Antarctiva" & (type == "Corr. Author" | type == "Gatekeeper" ))
t <- t(table(s$continent, s$type))
corr <- chisq.test(t)
s <- subset(people, continent != "Antarctiva" & (type == "First Author" | type == "Gatekeeper" ))
t <- t(table(s$continent, s$type))
first <- chisq.test(t)
s <- subset(people, continent != "Antarctiva" & (type == "Last Author" | type == "Gatekeeper" ))
t <- t(table(s$continent, s$type))
last <- chisq.test(t)
sig_df <- data.frame(type = rep(c("Gatekeeper", "Corr. Author", "First Author", "Last Author"), 3),
continent = rep(c("Africa", "Asia", "Europe", "North America", "Oceania", "South America"), 2),
sig = c("N/A", sig2ast(corr$p.value), sig2ast(first$p.value), sig2ast(last$p.value)))
continent_sig_list <- list("Corresponding Author" = corr, "First Author" = first, "Last Author" = last)
# Now we should repeat this graph, except this time for the continental representation
expected <- people %>%
filter(type == "Gatekeeper") %>%
mutate(total = n()) %>%
filter(continent != "Antarctica") %>%
group_by(type, continent) %>%
summarize(
expected_prop = n() / total[1]
) %>%
ungroup() %>%
select(-type)
p2 <- people %>%
group_by(type) %>%
mutate(total = n()) %>%
filter(continent != "Antarctica") %>%
group_by(type, continent) %>%
summarize(
prop = n() / total[1]
) %>%
ungroup() %>%
left_join(expected, by = "continent") %>%
left_join(sig_df, by = c("continent", "type")) %>%
mutate(
type = factor(type, levels = c("Gatekeeper", "Corr. Author", "First Author", "Last Author"))
) %>%
# start ggplot
ggplot(aes(x = continent, y = prop, fill = continent)) +
geom_bar(stat = "identity", alpha = 0.8, color = "black") +
geom_bar(stat = "identity", aes(y = expected_prop), alpha = 0, color = "black", fill = "white", size = 0.5, linetype = "dashed") +
#geom_text(aes(label = paste0(round(prop, 3) * 100, "%"), y = 0.05), size = 2) +
geom_text(aes(label = sig, x = 3.5, y = 0.92), size = 2.5) +
geom_segment(aes(x = 1, xend = 6, y = ifelse(sig != "N/A", 0.9, 1.1), yend = ifelse(sig != "N/A", 0.9, 1.1)), color = "black") +
facet_wrap(~type, nrow = 1) +
theme_dakota() +
ylim(c(0, 1)) +
guides(fill = F) +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x = element_blank()
) +
labs(y = "Proportion") +
scale_fill_brewer(palette = "Set2")
fig8 <- grid.arrange(p1, p2)
ggsave("~/Desktop/elife_figure8.png", plot = fig8, height = 5, width = 7)
fig9 <- elife %>%
filter(bre_gender %in% c("M", "F")) %>%
mutate(
num_female_reviewers = ifelse(bre_is_reviewer & bre_gender == "F", num_female_reviewers - 1, num_female_reviewers),
num_male_reviewers = ifelse(bre_is_reviewer & bre_gender == "M", num_male_reviewers - 1, num_male_reviewers),
num_reviewers = ifelse(bre_is_reviewer, num_reviewers - 1, num_reviewers),
composition = ifelse(num_male_reviewers > 0 & num_female_reviewers > 0, "Mixed",
ifelse(num_male_reviewers == num_reviewers, "All Men",
ifelse(num_female_reviewers == num_reviewers, "All Women", "Uncertain"
)
)
),
bre_gender = ifelse(bre_gender == "M", "Male Reviewing Editor", "Female Reviewing Editor")
) %>%
group_by(bre_gender) %>%
mutate(total = n()) %>%
group_by(composition, bre_gender) %>%
summarize(
prop = n() / total[1]
) %>%
ungroup() %>%
mutate(
composition = reorder(composition, -prop)
) %>%
#arrange(prop) %>%
ggplot(aes(x = composition, y = prop, fill = composition)) +
geom_bar(stat = "identity", color = "black", alpha = 0.8) +
facet_wrap(~bre_gender) +
geom_text(aes(label = paste0(round(prop, 3) * 100, "%"), y = prop + 0.025), size = 2.5) +
theme_dakota() +
scale_fill_brewer(palette = "Set2") +
ylim(0, 0.7) +
labs(y = "Proportion",
x = "Composition of Peer Reviewers"
)
fig9
ggsave("~/Desktop/elife_figure9.png", plot = fig9, height = 4, width = 7)
# Load the main eLife data file
elife <- read_excel("elife_datafile.xls")
# Load the country infomration .csv file, which was manually created and available along with this file
country_mapping <- read_csv("elife_countries.csv")
reviewer1 <- elife[, c("reviewer1_name", "reviewer1_gender", "reviewer1_institution", "reviewer1_country")]
reviewer1 <- reviewer1[with(reviewer1, !is.na(reviewer1_name)), ]
colnames(reviewer1) <- c("reviewer_name", "reviewer_gender", "reviewer_institution", "reviewer_country")
reviewer2 <- elife[, c("reviewer2_name", "reviewer2_gender", "reviewer2_institution", "reviewer2_country")]
reviewer2 <- reviewer2[with(reviewer2, !is.na(reviewer2_name)), ]
colnames(reviewer2) <- c("reviewer_name", "reviewer_gender", "reviewer_institution", "reviewer_country")
reviewer3 <- elife[, c("reviewer3_name", "reviewer3_gender", "reviewer3_institution", "reviewer3_country")]
reviewer3 <- reviewer2[with(reviewer3, !is.na(reviewer3_name)), ]
colnames(reviewer3) <- c("reviewer_name", "reviewer_gender", "reviewer_institution", "reviewer_country")
reviewer4 <- elife[, c("reviewer4_name", "reviewer4_gender", "reviewer4_institution", "reviewer4_country")]
reviewer4 <- reviewer2[with(reviewer4, !is.na(reviewer4_name)), ]
colnames(reviewer4) <- c("reviewer_name", "reviewer_gender", "reviewer_institution", "reviewer_country")
reviewers <- rbind(reviewer1, reviewer2, reviewer3, reviewer4)
# proportion of reviewers by gender compared to proportions of author by gender
bres <- elife[, c("bre_gender", "bre_name", "bre_country")]
peer_reviewers <- reviewers[, c("reviewer_gender", "reviewer_name", "reviewer_country")]
editors <- elife[, c("se_gender", "se_name", "se_country")]
names(editors) <- c("gender", "name", "country")
names(bres) <- c("gender", "name", "country")
names(peer_reviewers) <- c("gender", "name", "country")
revs <- as.data.frame(rbind(bres, editors, peer_reviewers))
revs$type <- "Gatekeeper"
revs <- revs[!is.na(revs$country), ]
# now we add the authors
ca_authors <- elife[, c("ca_gender", "ca_name", "ca_country")]
names(ca_authors) <- c("gender", "name", "country")
ca_authors$type <- "Corr. Author"
fa_authors <- elife[, c("fa_gender", "fa_name", "fa_country")]
names(fa_authors) <- c("gender", "name", "country")
fa_authors$type <- "First Author"
la_authors <- elife[, c("la_gender", "la_name", "la_country")]
names(la_authors) <- c("gender", "name", "country")
la_authors$type <- "Last Author"
# combine all these variables into a single data frame
people <- as.data.frame(rbind(revs, ca_authors, fa_authors, la_authors))
people <- people[!duplicated(people[, c("name", "country", "type")]), ]
people$gender = with(people, relevel(factor(ifelse(gender %in% c("M", "F"), gender,
ifelse(!is.na(name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"))
# Now lets map the continent values onto this dataframe
people <- people %>%
mutate(country = tolower(country)) %>%
left_join(country_mapping, by = c("country" = "Country")) %>%
mutate(
country = Mapping,
continent = Continent
) %>%
select(-Mapping, -Continent)
# now lets clear the namespace by removing these unecessary variables
bres <- peer_reviewers <- editors <- revs <- ca_authors <- fa_authors <- la_authors <-  NULL
reviewer1 <- reviewer2 <- reviewer3 <- reviewer4 <- reviewers <- NULL
# Moving on, lets begin to work with the manuscript data.
elife <- elife %>%
# This group_by is needed to make the mutate functions work propoerly
group_by(MSNO) %>%
# these vairbales need to be converted to lowercase for the next step...
mutate(
ca_country = tolower(ca_country),
la_country = tolower(la_country),
fa_country = tolower(fa_country),
bre_country = tolower(bre_country),
se_country = tolower(se_country),
reviewer1_country = tolower(reviewer1_country),
reviewer2_country = tolower(reviewer2_country),
reviewer3_country = tolower(reviewer3_country),
reviewer4_country = tolower(reviewer4_country)
) %>%
# This series of left_joins + mutates + selects is ugly, but it seems one of the most straightforward ways of adding the country mapping values for
# each of the author and reviewer types.
left_join(country_mapping, by = c("ca_country" = "Country")) %>%
mutate(
ca_country = Mapping,
ca_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("la_country" = "Country")) %>%
mutate(
la_country = Mapping,
la_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("fa_country" = "Country")) %>%
mutate(
fa_country = Mapping,
fa_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("se_country" = "Country")) %>%
mutate(
se_country = Mapping,
se_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("bre_country" = "Country")) %>%
mutate(
bre_country = Mapping,
bre_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("reviewer1_country" = "Country")) %>%
mutate(
reviewer1_country = Mapping,
reviewer1_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("reviewer2_country" = "Country")) %>%
mutate(
reviewer2_country = Mapping,
reviewer2_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("reviewer3_country" = "Country")) %>%
mutate(
reviewer3_country = Mapping,
reviewer3_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
left_join(country_mapping, by = c("reviewer4_country" = "Country")) %>%
mutate(
reviewer4_country = Mapping,
reviewer4_continent = Continent
) %>%
select(-Mapping, -Continent) %>%
# Now I will turn towards the other variables that we will be working with.
mutate(
# convert NA assignments in gender assignment to a value of "Unknown" as well as setup factor levels
ca_gender = relevel(factor(ifelse(ca_gender %in% c("M", "F"), ca_gender, ifelse(!is.na(ca_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
fa_gender = relevel(factor(ifelse(fa_gender %in% c("M", "F"), fa_gender, ifelse(!is.na(fa_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
la_gender = relevel(factor(ifelse(la_gender %in% c("M", "F"), la_gender, ifelse(!is.na(la_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
se_gender = relevel(factor(ifelse(se_gender %in% c("M", "F"), se_gender, ifelse(!is.na(se_name), "UNK", NA)), levels = c("M", "F", "UNK")), ref = "F"),
bre_gender = relevel(factor(ifelse(se_gender %in% c("M", "F"), bre_gender, ifelse(!is.na(bre_name), "UNK", NA)),
levels = c("M", "F", "UNK")), ref = "F"),
reviewer1_gender = relevel(factor(ifelse(reviewer1_gender %in% c("M", "F"), reviewer1_gender, ifelse(!is.na(reviewer1_name), "UNK", NA)),
levels = c("M", "F", "UNK")), ref = "F"),
reviewer2_gender = relevel(factor(ifelse(reviewer2_gender %in% c("M", "F"), reviewer2_gender, ifelse(!is.na(reviewer2_name), "UNK", NA)),
levels = c("M", "F", "UNK")), ref = "F"),
reviewer3_gender = relevel(factor(ifelse(reviewer3_gender %in% c("M", "F"), reviewer3_gender, ifelse(!is.na(reviewer3_name), "UNK", NA)),
levels = c("M", "F", "UNK")), ref = "F"),
reviewer4_gender = relevel(factor(ifelse(reviewer4_gender %in% c("M", "F"), reviewer4_gender, ifelse(!is.na(reviewer4_name), "UNK", NA)),
levels = c("M", "F", "UNK")), ref = "F"),
# Flag the data if there is an initial submission but no decision has been made
initial_decision_made = !is.na(initial_decision),
# Flag data if full submission has been submitted, but no decision has been made (ie: still in revision or decision stage)
full_decision_made = initial_decision != "Reject" & last(na.omit(c(full_decision, rev1_decision, rev2_decision))) != "Revise",
# Flag the data if it was appealed at any state during its process
appealed_any_stage = any(c(appeal_state1, appeal_state2, appeal_state3) == 4) & any(!is.na(c(appeal_state1, appeal_state2, appeal_state3))),
# Flag the data if the initial decision of the manuscript was encouraged
encouraged = initial_decision_made & initial_decision == "Encourage",
# Flag the data if the full submission was eventually accepted
accepted = full_decision_made & any(c(full_decision, rev1_decision, rev2_decision) == "Accept", na.rm = T),
# Flag data if there are potential inconsistencies with the naming, ie: no last name for a full submittion but there is a first name
#name_inconsistency = full_decision_made & ((!is.na(la_name) & is.na(elife$fa_name)) | ((is.na(la_name) & !is.na(fa_name)))),
# This is a list of all the full decisions made (first decision or full submission + subsequent revisions)
full_decisions = list(na.omit(c(full_decision, rev1_decision, rev2_decision))),
# Add variables related to how long it takes to go through the review process
deltatime_rev1 = as.Date(rev1_decision_date) - as.Date(rev1_submission_date),
deltatime_rev2 = as.Date(rev2_decision_date) - as.Date(rev2_submission_date),
# Store the final stage of the full-submission process in which the final decision was amde
final_decision_stage = ifelse(full_decision_made, c("Full", "Rev1", "Rev2")[grep("Accept|Reject", unlist(full_decisions))], "Pending"),
# Calculat the total amount of time spent deliberating revision decisions
revision_time = ifelse(final_decision_stage == "Full", NA,
ifelse(final_decision_stage == "Rev1", deltatime_rev1,
deltatime_rev1 + deltatime_rev2)),
# Calculate total amount of time spent deliberating decisions from first full submittion to the final decision
deltatime_final = ifelse(final_decision_stage == "Full", deltatime_full_submission_decision,
ifelse(final_decision_stage == "Rev1", deltatime_rev1 + deltatime_full_submission_decision,
deltatime_rev2 + deltatime_rev1 + deltatime_full_submission_decision)),
# Now add variables relating to the composition of the reviewer team
# Quality of list variables—list of the names, countries, and genders of reviewers
reviewer_names = list(tolower(na.omit(c(reviewer1_name, reviewer2_name, reviewer3_name, reviewer4_name)))),
reviewer_genders = list(na.omit(c(reviewer1_gender, reviewer2_gender, reviewer3_gender, reviewer4_gender))),
reviewer_countries = list(tolower(na.omit(c(reviewer1_country, reviewer2_country, reviewer3_country, reviewer4_country)))),
reviewer_continents = list(tolower(na.omit(c(reviewer1_continent, reviewer2_continent, reviewer3_continent, reviewer4_continent)))),
# Number of reviewers in the team
num_reviewers = length(unlist(reviewer_names)),
# Number of reviewers on the team identified as female
num_female_reviewers = sum(unlist(reviewer_genders) == 1),
# NUmber of reviewers on the team identified as male
num_male_reviewers = sum(unlist(reviewer_genders) == 2),
# Composition: three variables indicaitng whether all have a gender identified as male, all have a gender identified as female, or there is a mix
# of at least one male and one female reviewer on the team
composition = factor(ifelse(is.na(full_submission_date), NA,
ifelse(all(unlist(reviewer_genders) == 2), "All Men",
ifelse(all(unlist(reviewer_genders) == 1), "All Women",
ifelse(any(unlist(reviewer_genders) == 1) & any(unlist(reviewer_genders) == 2), "Mixed",
"Uncertain"
)
)
)
) # end first ifelse
, levels = c("All Men", "All Women", "Mixed", "Uncertain")), # end factor
# Number of revisions
num_revisions = length(unlist(full_decisions)) - 1,
# The corresponding author is from the same country as at least one reviewer
ca_country_homophily = !is.na(ca_country) & tolower(ca_country) %in% unlist(reviewer_countries),
# The last author is from the same country as at least one reviewer
la_country_homophily = !is.na(la_country) & tolower(la_country) %in% unlist(reviewer_countries),
# The first author is from the same country as at least one reviewer
fa_country_homophily = !is.na(fa_country) & tolower(fa_country) %in% unlist(reviewer_countries),
# The corresponding author is from the same country as at least one reviewer
ca_continent_homophily = !is.na(ca_continent) & tolower(ca_continent) %in% unlist(reviewer_continents),
# The last author is from the same country as at least one reviewer
la_continent_homophily = !is.na(la_continent) & tolower(la_continent) %in% unlist(reviewer_continents),
# The first author is from the same country as at least one reviewer
fa_continent_homophily = !is.na(fa_continent) & tolower(fa_continent) %in% unlist(reviewer_continents),
# The BRE is also listed as a reviewer
bre_is_reviewer = tolower(bre_name) %in% unlist(reviewer_names),
ca_bre_country_homophily = bre_country == ca_country,
ca_bre_continent_homophily = bre_continent == ca_continent,
# A short series of variables specifying if the first and last authors are the same, or if the CA is also the first/last author
ca_is_first = tolower(ca_name) == tolower(fa_name),
ca_is_last = tolower(ca_name) == tolower(la_name),
single_authored = tolower(fa_name) == tolower(la_name),
# this just cleans up a poorly named variable earlier in the preprocessing step
submission_type = type.x
) %>%
# Now lets remove any identifying information, ie: names and institutions
select(-c(ca_name, la_name, fa_name, se_name, bre_name, reviewer1_name, reviewer2_name, reviewer3_name, reviewer4_name,
ca_institution, la_institution, fa_institution, se_institution, bre_institution,
reviewer1_institution, reviewer2_institution, reviewer3_institution, reviewer4_institution)) %>%
# Also, lets remove variables that we will not prefently be working with, just to keep the table clean
select(-c(prop_male_reviewers, prop_female_reviewers, appeal_state1, appeal_state2, appeal_state3, type.x, type.y,
reviewer_names, reviewer_countries, reviewer_continents, reviewer_genders, full_decisions))
# write this file as output, so that future analysis can start from this file as a checkpoint
write.csv(elife, "~/Dropbox/elife/formatted_elife.csv")
# clean the namespace
country_mapping <- NULL
library(ggplot2)
library(dplyr)
library(readr)
library(readxl)
library(gridExtra)
library(grid)
library(tidyr)
# This function for creating a multiplot grid object with a shared ledend is largely derivied, with a few minor
# tweaks, from the following blog by Andy Phillips.
# https://andyphilips.github.io/blog/2017/04/04/single-legend-for-multiple-plots.html
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), title = "", plot = T) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] +
theme(legend.position = position,
legend.title = element_blank()))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x +
theme(legend.position = "none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,ncol = 1,
top = textGrob(title,
gp=gpar(fontsize=12,
fontface = "bold",
fontfamily = "Times"),
just = "top"),
heights = unit.c(unit(1, "npc") - lheight, lheight)
),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
top = textGrob(title,
gp=gpar(fontsize=12,
fontface = "bold",
fontfamily = "Times"),
just = "top"),
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
if(plot) {
grid.newpage()
grid.draw(combined)
}
# return gtable invisibly
invisible(combined)
}
theme_dakota <- function () {
theme_bw(base_size=10, base_family="Times") %+replace%
theme(
strip.background = element_blank(),
strip.text = element_text(face = "bold"),
plot.title = element_text(size = 11, face = "bold"),
axis.text.x = element_text(size = 9, margin = margin(t = 5, b = 5)),
legend.title = element_blank(),
legend.position = "bottom"
)
}
# converts a provided p-value into a representation that is easier to visualize
sig2ast <- function(p) { ifelse(p <= 0.0001, "****",
ifelse(p <= 0.001, "***",
ifelse(p <= 0.01, "**",
ifelse(p <= 0.05, "*", "ns")
)
)
)
}
# I pulled the below function from a stack overflow question. It should capitalize the first letter of each work in a string
# https://stackoverflow.com/questions/6364783/capitalize-the-first-letter-of-both-words-in-a-two-word-string
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
table(elife$bre_gender)
table(subset(people, type == "gatekeeper")$gender)
table(subset(people, type == "Gatekeeper")$gender)
